<snippet>
	<content><![CDATA[






/*
  Compete against Yourself.
  Author - Sangramsinh
*/
/*
  Credits -
  Atcoder library - https://atcoder.github.io/ac-library/production/document_en/ (namespace atcoder)
  Github source code of library - https://github.com/atcoder/ac-library/tree/master/atcoder
  https://codeforces.com/contest/4/submission/150120627
*/


#include<bits/stdc++.h>
using namespace std;

#define pii 			pair<int,int>
#define pb 				push_back
#define F 				first
#define S 				second
#define all(x) 			x.begin(),x.end()
#define fo(i,n) 		for(int i = 0;i<n;i++)
#define repA(i,st,en)   for(int i=(st);i<=(en);++i)
#define repD(i,st,en)   for(int i=(en);i>=(st);--i)
#define inf 			INT_MAX
#define N_inf 			INT_MIN
#define fastIO 			ios_base::sync_with_stdio(false);cin.tie(nullptr);cout.tie(nullptr);

#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#define endl 			"\n"

const int mod = (int)1e9 + 7;

using lli = 	long long int;
using mytype = 	long double;
using ii = 		pair<lli, lli>;
using vii = 	vector<ii>;
using vi = 		vector<lli>;


typedef long long ll;
typedef unsigned long long ull;
typedef long double lld;

ll min(ll a, ll b) { if (a >= b) { return b; } return a; }
ll max(ll a, ll b) { if (a >= b) { return a; } return b; }

ll ModAdd(ll a, ll b , ll mod) {
	return ((a % mod) + (b % mod)) % mod;
}


ll ModSubtract(ll a, ll b , ll mod) {
	return ((a % mod) - (b % mod) + mod) % mod;
}


ll ModMultiply(ll a, ll b , ll mod) {
	return ((a % mod) * (b % mod)) % mod;
}



ll BinExpo(ll base , ll pow, ll mod) {
	// base Cond
	if (pow == 0) {
		return 1;
	}
	if (pow == 1) {
		return base;
	}
	ll newBase = BinExpo(base, pow / 2, mod);
	ll ans = 1;
	if ((pow % 2) == 1) {// odd
		ans = ((newBase % mod) * (newBase % mod)) % mod;
		ans = ((ans % mod) * (base % mod)) % mod;
	}
	else { // even
		ans = ((newBase % mod) * (newBase % mod)) % mod;
	}

	return ans;

}

ll ModDivide(ll a, ll b , ll mod) { // Fermat's Theorem
	return ((a % mod) * (BinExpo(b, mod - 2, mod))) % mod;
}

template <class T>
using ordered_set =  __gnu_pbds::tree<T, __gnu_pbds::null_type, less<T>, __gnu_pbds::rb_tree_tag, __gnu_pbds::tree_order_statistics_node_update>;
// X.find_by_order(k) return kth element. 0 indexed.
// X.order_of_key(k) returns count of elements strictly less than k.

// TC : log(min(a,b))
// GitHub Link : https://rb.gy/zk3v9y
ll EuclidGcd(ll a, ll b) {
	if (b == 0) {
		return a;
	}
	a = a % b;
	if (a >= b) {

	} else {
		swap(a, b);
	}

	return EuclidGcd(a, b);
}

// ax + by = gcd(a,b) -> Linear Diophatine Eqn -> To find This Eqn we used Extended Euclid's Algo
pair<int, int> extended_gcd(int a, int b) {
	if (b == 0) {
		return {1, 1};
	}

	pair<int, int> p = extended_gcd(b, a % b);
	int x2 = p.F;
	int y2 = p.S;

	int x = y2;
	int y = x2 - (floor(a / b) * y2);

	return {x, y};
}

ll LCM(ll a, ll b) {
	return ((a * b) / EuclidGcd(a, b));
}

ll ceil(ll a, ll b) {
	return ((a + b - 1ll) / b);
}

ll floor(ll a, ll b) {
	return (a / b);
}



void PrimeFactors() {
	int num;
	cin >> num;
	map<int, int> mp;

	for (int i = 2; (i * i) <= num; i++) {
		while ((num % i) == 0) {
			num /= i;
			mp[i]++;
		}

	}
	if (num > 1) {
		mp[num]++;
	}
	for (auto [k, p] : mp) {
		cout << k << " " << p << endl;
	}
	cout << endl;
}



#ifndef ONLINE_JUDGE
#define debug(x) cerr << #x <<" "; _print(x); cerr << endl;
#else
#define debug(x)
#endif

void _print(ll t) {cerr << t;}
void _print(int t) {cerr << t;}
void _print(string t) {cerr << t;}
void _print(char t) {cerr << t;}
void _print(lld t) {cerr << t;}
void _print(double t) {cerr << t;}
void _print(ull t) {cerr << t;}

template <class T, class V> void _print(pair <T, V> p);
template <class T> void _print(vector <T> v);
template <class T> void _print(set <T> v);
template <class T, class V> void _print(map <T, V> v);
template <class T> void _print(multiset <T> v);

template <class T, class V> void _print(pair <T, V> p) {cerr << "{"; _print(p.ff); cerr << ","; _print(p.ss); cerr << "}";}
template <class T> void _print(vector <T> v) {cerr << "[ "; for (T i : v) {_print(i); cerr << " ";} cerr << "]";}
template <class T> void _print(set <T> v) {cerr << "[ "; for (T i : v) {_print(i); cerr << " ";} cerr << "]";}
template <class T> void _print(multiset <T> v) {cerr << "[ "; for (T i : v) {_print(i); cerr << " ";} cerr << "]";}
template <class T, class V> void _print(map <T, V> v) {cerr << "[ "; for (auto i : v) {_print(i); cerr << " ";} cerr << "]";}

void solve() {

}

int32_t main() {
#ifndef ONLINE_JUDGE
	freopen("Error.in", "w", stderr);
	fastIO
	int tc;
	cin >> tc;
	while (tc--) {
		solve();
	}


	return 0;
#endif
}








]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>cpp</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>